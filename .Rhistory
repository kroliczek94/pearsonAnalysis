ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=`Var1`, y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)  +  scale_color_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot") +
ylim(-2.5, 2.5) +
coord_flip()
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=`Var1`, y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)   + coord(flip)
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=`Var1`, y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=`Var1`, y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)    + coord_flip()
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=`Var1`, y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)    + coord_flip() + scale_colour_gradient2(low = "red", mid = "white", high = "green")
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=`Var1`, y=value, label=value)) +
geom_point(stat='identity', aes(fill=value, color = 'black'), size=6)    + coord_flip() + scale_colour_gradient2(low = "red", mid = "white", high = "green")
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=`Var1`, y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)    + coord_flip() + scale_colour_gradient2(low = "red", mid = "white", high = "green")
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=reorder(Var1, -value), y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)    + coord_flip() + scale_colour_gradient2(low = "red", mid = "white", high = "green")
ggplot(d_cor_melt %>% filter(Var2 == 'kwh'), aes(x=reorder(Var1, value), y=value, label=value)) +
geom_point(stat='identity', aes(col=value), size=6)    + coord_flip() + scale_colour_gradient2(low = "red", mid = "white", high = "green")
anim <- ggplot(tabAll %>% group_by(idsito, anno, data_month) %>% summarise(kwh_sum = sum(kwh)), aes(x = data_month, y = kwh_sum, color = factor(1*idsito, labels=c(1:17)), frame = anno)) + geom_line() + scale_color_discrete(name = "Panel")
gganimate(anim)
anim <- ggplot(tabAll %>% group_by(idsito, anno, tab) %>% summarise(kwh_sum = sum(kwh)), aes(x = tab, y = kwh_sum, color = factor(1*idsito, labels=c(1:17)), frame = anno)) + geom_line() + scale_color_discrete(name = "Panel")
gganimate(anim)
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in 1:50){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
}
grid.arrange(grobs = plots, ncol= 3)
}
f(c(lon, lat))
f(c(lon, lat))
f(c('lon', 'lat'))
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in names.length){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
}
grid.arrange(grobs = plots, ncol= 3)
}
f(c(lon, lat))
f(c('lon', 'lat'))
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in length(names)){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
}
grid.arrange(grobs = plots, ncol= 3)
}
f(c('lon', 'lat'))
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in length(names) + 1){
print(i)
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_smooth() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
}
grid.arrange(grobs = plots, ncol= 3)
}
f(c('lon', 'lat'))
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in length(names)){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
}
grid.arrange(grobs = plots, ncol= 3)
}
f(c('lon', 'lat'))
plots
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in length(names)){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
print(plots)
}
grid.arrange(grobs = plots, ncol= )
}
f(c('lon', 'lat'))
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in length(names)){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
print(plots[i])
}
grid.arrange(grobs = plots, ncol= )
}
f(c('lon', 'lat'))
f(c('lon', 'lat', 'idsito'))
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in length(names)){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
}
grid.arrange(grobs = plots, ncol= )
}
f(c('lon', 'lat', 'idsito'))
function (..., grobs = list(...), layout_matrix, vp = NULL,
name = "arrange", as.table = TRUE, respect = FALSE, clip = "off",
nrow = NULL, ncol = NULL, widths = NULL, heights = NULL,
top = NULL, bottom = NULL, left = NULL, right = NULL, padding = unit(0.5,
"line"))
f <- function(names)
{
plots = list()
cols_to_plot <- names
for(i in length(names)){
grf = ggplot(data = tabAll, aes_string(x = cols_to_plot[i])) +
geom_density() +
ylab(cols_to_plot[i])
plots = c(plots, list(grf))
}
grid.arrange(grobs = plots, ncol= )
}
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(caret)
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
trainingSet <- tabAll[inTraining, ]
testingSet <- tabAll[-inTraining, ]
ctrl <- trainControl(
repeats = 5)
ctrl <- trainControl()
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10)
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 3
)
fit2 <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
trControl = ctrl,
method = "lm",
preProc = c("center", "scale"))
gc()
fit2 <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
trControl = ctrl,
method = "lm",
preProc = c("center", "scale"))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
trainingSet <- tabAll[inTraining, ]
testingSet <- tabAll[-inTraining, ]
ctrl <- trainControl()
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 3
)
library(caret)
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
setwd("D:/elektrownie db")
library("ggplot2")
library(dplyr)
library(zoo)
library(tidyr)
library(stargazer)
library(gapminder)
library(GGally)
library(caret)
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
initial <- read.csv("elektrownie.csv", nrows = 1000)
classes <- sapply(initial, class)
tabAll <- read.csv("elektrownie.csv",
colClasses = classes)
p <- ggplot(tabAll, aes(data, kwh, size = kwh, frame = tab, cumulative = TRUE)) +
#geom_point() +
geom_smooth(aes(group = tab), method = "loess", show.legend = FALSE, span = 0.45) + facet_wrap( ~ idsito)
library(caret)
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
trainingSet <- tabAll[inTraining, ]
testingSet <- tabAll[-inTraining, ]
ctrl <- trainControl()
fit2 <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
trControl = ctrl,
method = "lm",
preProc = c("center", "scale"))
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10
)
memory.limit(size = 2500)
knitr::opts_chunk$set(echo = TRUE)
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10
)
library(caret)
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
testingSet <- tabAll[-inTraining, ]
ctrl <- trainControl()
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10
)
View(inTraining)
View(ctrl)
View(initial)
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(format(utils::object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10
)
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
trainingSet <- tabAll[inTraining, ][idsito = 0.1, ]
inTraining <- createDataPartition(y = tabAll$kwh, p = .8, list = FALSE)
trainingSet <- tabAll[tabAll$idsito = 0.1, ][inTraining, ]
trainingSet <- tabAll[tabAll$idsito == 0.1, ][inTraining, ]
testingSet <- tabAll[tabAll$idsito == 0.1, ][-inTraining, ]
ctrl <- trainControl()
fit <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10
)
fit
fit2 <- train(kwh ~ .,
data = trainingSet,
tuneLength = 5,
trControl = ctrl,
method = "lm",
preProc = c("center", "scale"))
fit2
trainingSet
fit <- train(kwh ~ .,
data = complete.cases(trainingSet),
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10
)
complete.cases(trainingSet)
fit2 <- train(kwh ~ .,
data = complete.cases(trainingSet),
tuneLength = 5,
trControl = ctrl,
method = "lm",
preProc = c("center", "scale"))
fit2 <- train(kwh ~ .,
data = complete.cases(trainingSet),
tuneLength = 5,
trControl = ctrl,
method = "lm",
preProc = c("center", "scale"))
tabAll[rowSums(is.na(tabAll)) > 0,]
fit <- train(kwh ~ .,
data = trainingSet[1:1000,],
tuneLength = 5,
method = "rf",
trControl = ctrl,
preProce = c("center", "scale"),
# Paramter dla algorytmu uczącego
ntree = 10
)
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% summarise(avg_scores = mean(avg_score), n = n())
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggthemes)
setwd("D:/pearson")
#tabAll <- read.csv("data2018.csv", sep = ";", classes = c(integer, factor, factor, factor, numeric, numeric, numeric))
initial <- read.csv("data2018.csv",sep=";", nrows = 1000)
classes <- sapply(initial, class)
classes["inv_rate"] = "numeric"
tabAll <- read.csv("data2018.csv",sep=";",
colClasses = classes)
colnames(tabAll)[1] <- "learner_id"
#missing values
sapply(tabAll, function(x) sum(is.na(x)))
tabAll[rowSums(is.na(tabAll)) > 0,]
tabCleaned <- tabAll %>% drop_na() %>% filter(unit != "") %>% filter(country != "")
#learner to country
countrySummary <- tabCleaned %>% group_by(country) %>% summarise(nlearners = length(unique(learner_id))) %>% arrange(-nlearners) %>% head(10)
p <- ggplot(data = countrySummary, aes(x= country, y = nlearners))
p + geom_bar(stat="identity")
unitSummary <- tabCleaned %>% group_by(unit, in_course) %>% summarise(avg_scores = mean(avg_score), n = n(), avg_compl = mean(completion))
p <- ggplot(data = unitSummary, aes(x= unit, y = n, fill = avg_compl))
p + geom_bar(stat= "identity")  + geom_label(label =  "2")
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% summarise(avg_scores = mean(avg_score), n = n())
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% mutate(avg_scores = mean(avg_score), n = n())
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% mutate(avg_scores = mean(avg_score), n = n())
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% mutate(avg_scores = mean(avg_score), n = n()) %>% filter(n == 17)
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% summarise(avg_scores = mean(avg_score), n = n()) %>% filter(n == 17)
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17)
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17)
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17)
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(avg_score)%>%tail(100)
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(avg_scores)%>%tail(100)
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(-avg_scores)%>%tail(100)
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(avg_scores)%>%tail(100)
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(avg_scores)%>%head(100)
bottom1percentSummary
p <- ggplot(data = bottom1percentSummary, aes(x= country)) + geom_histogram
p <- ggplot(data = bottom1percentSummary, aes(x= country)) + geom_histogram()
p
p <- ggplot(data = bottom1percentSummary, aes(x= country))
p + geom_histogram(stat="count")
p + geom_point(stat="count")
p + geom_point(stat="count")
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(avg_scores)%>%head(100)
ggplot(unitSummary, aes(x = unit, y = avg_compl, color = in_course, size= completion)) +   # Fill column
geom_point(stat = "identity", width = .6) +   # draw the bars
coord_flip() +  # Flip axes
labs(title="Email Campaign Funnel") +
theme_tufte() +  # Tufte theme from ggfortify
theme(plot.title = element_text(hjust = .5),
axis.ticks = element_blank()) +   # Centre plot title
scale_fill_brewer(palette = "Dark2")  # Color palette
ggplot(unitSummary, aes(x = unit, y = avg_compl, color = in_course, size= completion)) +   # Fill column
geom_point(stat = "identity", width = .6) +   # draw the bars
coord_flip() +  # Flip axes
labs(title="Email Campaign Funnel") +
theme_tufte() +  # Tufte theme from ggfortify
theme(plot.title = element_text(hjust = .5),
axis.ticks = element_blank()) +   # Centre plot title
scale_fill_brewer(palette = "Dark2")  # Color palette
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores))
p + geom_point()
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = country))
p + geom_point()
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = inv_rate))
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = inv_rate))
p + geom_point()
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country, in_course) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(avg_scores)%>%head(100)
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores))
p + geom_point()
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = incourse))
p + geom_point()
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = in_course))
p + geom_point()
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country, in_course) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% filter(n == 17) %>% arrange(avg_scores)
p + geom_point()
n
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = in_course))
p + geom_point()
bottom1percentSummary
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country, in_course) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% arrange(avg_scores)
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = incourse))
p + geom_point()
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = in_course))
p + geom_point()
summary(tabCleaned)
tabCleaned[tabCleaned$avg_score > 1]
tabCleaned[tabCleaned$avg_score > 1,]
tabCleaned <- tabAll %>% drop_na() %>% filter(unit != "") %>% filter(country != "") %>% filter(avg_score <= 1)
tabCleaned[tabCleaned$avg_score > 1,]
bottom1percentSummary <- tabCleaned %>% group_by(learner_id, country, in_course) %>% summarise(avg_scores = mean(avg_score), n = n(), inv_rate = mean(inv_rate)) %>% arrange(avg_scores)
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = in_course))
p + geom_point()
p <- ggplot(data = bottom1percentSummary, aes(x = learner_id, y = avg_scores, color = country))
p + geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
tabToCor <- tabAll %>% select(-c(data, tab))
d_cor <- as.matrix(cor(tabCleaned))
head(tabCleaned)
install.packages("polycor")
library(polycor)
d_cor <- as.matrix(cor(tabCleaned))
d_cor <- as.matrix(hetcor(tabCleaned))
d_cor
d_cor_melt <- arrange(melt(d_cor), -abs(value))
library(reshape)
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
d_cor <- as.matrix(tetrachoric(tabCleaned))
install.packages("sjPlot")
DF[] <- lapply(tabCleaned,as.numeric)
tabCleaned[] <- lapply(tabCleaned,as.numeric)
library(sjPlot)
sjp.corr(DF)
library(ggplot2)
library(tidyr)
setwd("D:/pearson")
initial <- read.csv("data2018.csv",sep=";", nrows = 1000)
setwd("D:/pearson")
tabCleaned
tabCleaned
''
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
